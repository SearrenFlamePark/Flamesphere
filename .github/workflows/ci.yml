name: ChatGPT-Obsidian Sync CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Create test environment
      run: |
        mkdir -p test_obsidian_vault
        echo "MONGO_URL=mongodb://localhost:27017" > backend/.env.test
        echo "DB_NAME=test_database" >> backend/.env.test
        echo "OPENAI_API_KEY=mock_key_for_testing" >> backend/.env.test
        echo "OBSIDIAN_VAULT_PATH=./test_obsidian_vault" >> backend/.env.test
    
    - name: Start MongoDB (Ubuntu/macOS)
      if: runner.os != 'Windows'
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: 6.0
    
    - name: Start MongoDB (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install mongodb
        mkdir C:\data\db
        start /b mongod --dbpath C:\data\db
        timeout 10
      shell: cmd
    
    - name: Run backend tests
      run: |
        cd backend
        pytest tests/ -v --cov=. --cov-report=xml
      env:
        PYTHONPATH: .
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
    
    - name: Install dependencies
      run: |
        cd frontend
        yarn install --frozen-lockfile
    
    - name: Run frontend tests
      run: |
        cd frontend
        yarn test --coverage --watchAll=false
    
    - name: Run frontend lint
      run: |
        cd frontend
        yarn lint || true
    
    - name: Build frontend
      run: |
        cd frontend
        yarn build

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        yarn install --frozen-lockfile
    
    - name: Build frontend
      run: |
        cd frontend
        yarn build
    
    - name: Create integration test environment
      run: |
        mkdir -p test_obsidian_vault
        echo "MONGO_URL=mongodb://localhost:27017" > backend/.env
        echo "DB_NAME=integration_test_db" >> backend/.env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> backend/.env
        echo "OBSIDIAN_VAULT_PATH=./test_obsidian_vault" >> backend/.env
    
    - name: Start backend server
      run: |
        cd backend
        python -m uvicorn server:app --host 0.0.0.0 --port 8001 &
        sleep 10
      env:
        PYTHONPATH: .
    
    - name: Run integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:8001/api/health || exit 1
        
        # Test connection endpoint
        curl -f -X POST http://localhost:8001/api/test/connection || exit 1
        
        # Test configuration endpoint
        curl -f http://localhost:8001/api/sync/config || exit 1
        
        echo "Integration tests passed!"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to preview environment
      run: |
        echo "Would deploy to preview environment"
        echo "Preview URL: https://pr-${{ github.event.number }}.preview.example.com"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Would deploy to production environment"
        echo "Production URL: https://chatgpt-obsidian-sync.example.com"
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Deployment to production: ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}